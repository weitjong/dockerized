#
# Copyright (c) 2018-2021 Yao Wei Tjong. All rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

---

name: DBE builder
on:
  pull_request:
  workflow_dispatch:
    inputs:
      project:
        description: Projects
        required: true
        default: urho3d
      platform:
        description: Platforms
        required: true
        default: android arm linux mingw rpi web
      rebase:
        description: Rebuild base image
        default: true
jobs:
  init:
    name: Init
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Parse inputs
        id: parse
        run: |
          rake parse[project,'${{ github.event.inputs.project }}'] #'
          rake parse[platform,'${{ github.event.inputs.platform }}'] #'
    outputs:
      project: ${{ steps.parse.outputs.project }}
      platform: ${{ steps.parse.outputs.platform }}
  base:
    name: Project
    runs-on: ubuntu-latest
    needs: init
    strategy:
      fail-fast: false
      matrix:
        project: ${{ fromJSON(needs.init.outputs.project) }}
    env:
      IMAGE: weitjong/dockerized:${{ matrix.project }}-base
    steps:
      - uses: actions/checkout@v2        
        if: github.event.inputs.rebase == 'true'
      - name: Build
        run: docker build --no-cache -t $IMAGE ${{ matrix.project }}/_base
        if: github.event.inputs.rebase == 'true'
      - name: Push
        if: |
          github.event.inputs.rebase == 'true' &&
          github.event_name == 'workflow_dispatch' &&
          github.ref == 'refs/heads/main'
        run: |
          echo ${{ secrets.DOCKER_PASSWORD }} |docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker push $IMAGE
          docker logout
  platform:
    name: Platform
    needs: [ init, base ]
    runs-on: ubuntu-latest
    if: github.event.inputs.platform != '-'
    strategy:
      fail-fast: false
      matrix:
        project: ${{ fromJSON(needs.init.outputs.project) }}
        platform: ${{ fromJSON(needs.init.outputs.platform) }}
    env:
      IMAGE: weitjong/dockerized:${{ matrix.project }}-${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v2
      - name: Build
        run: |
          if [[ ${{ matrix.platform }} =~ arm|rpi ]]; then
            sudo apt update
            sudo apt install -y --no-install-recommends qemu-user-static
            sudo apt clean
          fi
          docker build -t $IMAGE ${{ matrix.project }}/${{ matrix.platform }}
      - name: Push
        if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
        run: |
          echo ${{ secrets.DOCKER_PASSWORD }} |docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker push $IMAGE
          docker logout

...

# vi: set ts=2 sw=2 expandtab:
